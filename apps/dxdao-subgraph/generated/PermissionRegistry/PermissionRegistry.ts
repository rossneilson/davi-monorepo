// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PermissionSet extends ethereum.Event {
  get params(): PermissionSet__Params {
    return new PermissionSet__Params(this);
  }
}

export class PermissionSet__Params {
  _event: PermissionSet;

  constructor(event: PermissionSet) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get fromTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PermissionRegistry__ethPermissionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValueTransferred(): BigInt {
    return this.value0;
  }

  getValueTransferedOnBlock(): BigInt {
    return this.value1;
  }

  getValueAllowed(): BigInt {
    return this.value2;
  }

  getFromTime(): BigInt {
    return this.value3;
  }
}

export class PermissionRegistry__getETHPermissionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValueAllowed(): BigInt {
    return this.value0;
  }

  getFromTime(): BigInt {
    return this.value1;
  }
}

export class PermissionRegistry extends ethereum.SmartContract {
  static bind(address: Address): PermissionRegistry {
    return new PermissionRegistry("PermissionRegistry", address);
  }

  checkERC20Limits(from: Address): boolean {
    let result = super.call(
      "checkERC20Limits",
      "checkERC20Limits(address):(bool)",
      [ethereum.Value.fromAddress(from)]
    );

    return result[0].toBoolean();
  }

  try_checkERC20Limits(from: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkERC20Limits",
      "checkERC20Limits(address):(bool)",
      [ethereum.Value.fromAddress(from)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ethPermissions(
    param0: Address,
    param1: Address,
    param2: Bytes
  ): PermissionRegistry__ethPermissionsResult {
    let result = super.call(
      "ethPermissions",
      "ethPermissions(address,address,bytes4):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );

    return new PermissionRegistry__ethPermissionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_ethPermissions(
    param0: Address,
    param1: Address,
    param2: Bytes
  ): ethereum.CallResult<PermissionRegistry__ethPermissionsResult> {
    let result = super.tryCall(
      "ethPermissions",
      "ethPermissions(address,address,bytes4):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PermissionRegistry__ethPermissionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getERC20Limit(from: Address, token: Address): BigInt {
    let result = super.call(
      "getERC20Limit",
      "getERC20Limit(address,address):(uint256)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getERC20Limit(
    from: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC20Limit",
      "getERC20Limit(address,address):(uint256)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getETHPermission(
    from: Address,
    to: Address,
    functionSignature: Bytes
  ): PermissionRegistry__getETHPermissionResult {
    let result = super.call(
      "getETHPermission",
      "getETHPermission(address,address,bytes4):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(functionSignature)
      ]
    );

    return new PermissionRegistry__getETHPermissionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getETHPermission(
    from: Address,
    to: Address,
    functionSignature: Bytes
  ): ethereum.CallResult<PermissionRegistry__getETHPermissionResult> {
    let result = super.tryCall(
      "getETHPermission",
      "getETHPermission(address,address,bytes4):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(functionSignature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PermissionRegistry__getETHPermissionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getETHPermissionDelay(from: Address): BigInt {
    let result = super.call(
      "getETHPermissionDelay",
      "getETHPermissionDelay(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );

    return result[0].toBigInt();
  }

  try_getETHPermissionDelay(from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getETHPermissionDelay",
      "getETHPermissionDelay(address):(uint256)",
      [ethereum.Value.fromAddress(from)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permissionDelay(param0: Address): BigInt {
    let result = super.call(
      "permissionDelay",
      "permissionDelay(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_permissionDelay(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "permissionDelay",
      "permissionDelay(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddERC20LimitCall extends ethereum.Call {
  get inputs(): AddERC20LimitCall__Inputs {
    return new AddERC20LimitCall__Inputs(this);
  }

  get outputs(): AddERC20LimitCall__Outputs {
    return new AddERC20LimitCall__Outputs(this);
  }
}

export class AddERC20LimitCall__Inputs {
  _call: AddERC20LimitCall;

  constructor(call: AddERC20LimitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get valueAllowed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get index(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddERC20LimitCall__Outputs {
  _call: AddERC20LimitCall;

  constructor(call: AddERC20LimitCall) {
    this._call = call;
  }
}

export class CheckERC20LimitsCall extends ethereum.Call {
  get inputs(): CheckERC20LimitsCall__Inputs {
    return new CheckERC20LimitsCall__Inputs(this);
  }

  get outputs(): CheckERC20LimitsCall__Outputs {
    return new CheckERC20LimitsCall__Outputs(this);
  }
}

export class CheckERC20LimitsCall__Inputs {
  _call: CheckERC20LimitsCall;

  constructor(call: CheckERC20LimitsCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CheckERC20LimitsCall__Outputs {
  _call: CheckERC20LimitsCall;

  constructor(call: CheckERC20LimitsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteRemoveERC20LimitCall extends ethereum.Call {
  get inputs(): ExecuteRemoveERC20LimitCall__Inputs {
    return new ExecuteRemoveERC20LimitCall__Inputs(this);
  }

  get outputs(): ExecuteRemoveERC20LimitCall__Outputs {
    return new ExecuteRemoveERC20LimitCall__Outputs(this);
  }
}

export class ExecuteRemoveERC20LimitCall__Inputs {
  _call: ExecuteRemoveERC20LimitCall;

  constructor(call: ExecuteRemoveERC20LimitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteRemoveERC20LimitCall__Outputs {
  _call: ExecuteRemoveERC20LimitCall;

  constructor(call: ExecuteRemoveERC20LimitCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveERC20LimitCall extends ethereum.Call {
  get inputs(): RemoveERC20LimitCall__Inputs {
    return new RemoveERC20LimitCall__Inputs(this);
  }

  get outputs(): RemoveERC20LimitCall__Outputs {
    return new RemoveERC20LimitCall__Outputs(this);
  }
}

export class RemoveERC20LimitCall__Inputs {
  _call: RemoveERC20LimitCall;

  constructor(call: RemoveERC20LimitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveERC20LimitCall__Outputs {
  _call: RemoveERC20LimitCall;

  constructor(call: RemoveERC20LimitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetERC20BalancesCall extends ethereum.Call {
  get inputs(): SetERC20BalancesCall__Inputs {
    return new SetERC20BalancesCall__Inputs(this);
  }

  get outputs(): SetERC20BalancesCall__Outputs {
    return new SetERC20BalancesCall__Outputs(this);
  }
}

export class SetERC20BalancesCall__Inputs {
  _call: SetERC20BalancesCall;

  constructor(call: SetERC20BalancesCall) {
    this._call = call;
  }
}

export class SetERC20BalancesCall__Outputs {
  _call: SetERC20BalancesCall;

  constructor(call: SetERC20BalancesCall) {
    this._call = call;
  }
}

export class SetETHPermissionCall extends ethereum.Call {
  get inputs(): SetETHPermissionCall__Inputs {
    return new SetETHPermissionCall__Inputs(this);
  }

  get outputs(): SetETHPermissionCall__Outputs {
    return new SetETHPermissionCall__Outputs(this);
  }
}

export class SetETHPermissionCall__Inputs {
  _call: SetETHPermissionCall;

  constructor(call: SetETHPermissionCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get valueAllowed(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get allowed(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetETHPermissionCall__Outputs {
  _call: SetETHPermissionCall;

  constructor(call: SetETHPermissionCall) {
    this._call = call;
  }
}

export class SetETHPermissionDelayCall extends ethereum.Call {
  get inputs(): SetETHPermissionDelayCall__Inputs {
    return new SetETHPermissionDelayCall__Inputs(this);
  }

  get outputs(): SetETHPermissionDelayCall__Outputs {
    return new SetETHPermissionDelayCall__Outputs(this);
  }
}

export class SetETHPermissionDelayCall__Inputs {
  _call: SetETHPermissionDelayCall;

  constructor(call: SetETHPermissionDelayCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _timeDelay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetETHPermissionDelayCall__Outputs {
  _call: SetETHPermissionDelayCall;

  constructor(call: SetETHPermissionDelayCall) {
    this._call = call;
  }
}

export class SetETHPermissionUsedCall extends ethereum.Call {
  get inputs(): SetETHPermissionUsedCall__Inputs {
    return new SetETHPermissionUsedCall__Inputs(this);
  }

  get outputs(): SetETHPermissionUsedCall__Outputs {
    return new SetETHPermissionUsedCall__Outputs(this);
  }
}

export class SetETHPermissionUsedCall__Inputs {
  _call: SetETHPermissionUsedCall;

  constructor(call: SetETHPermissionUsedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get valueTransferred(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetETHPermissionUsedCall__Outputs {
  _call: SetETHPermissionUsedCall;

  constructor(call: SetETHPermissionUsedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
