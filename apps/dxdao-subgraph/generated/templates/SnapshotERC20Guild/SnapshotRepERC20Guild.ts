// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GuildInitialized extends ethereum.Event {
  get params(): GuildInitialized__Params {
    return new GuildInitialized__Params(this);
  }
}

export class GuildInitialized__Params {
  _event: GuildInitialized;

  constructor(event: GuildInitialized) {
    this._event = event;
  }
}

export class ProposalStateChanged extends ethereum.Event {
  get params(): ProposalStateChanged__Params {
    return new ProposalStateChanged__Params(this);
  }
}

export class ProposalStateChanged__Params {
  _event: ProposalStateChanged;

  constructor(event: ProposalStateChanged) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newState(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensLocked extends ethereum.Event {
  get params(): TokensLocked__Params {
    return new TokensLocked__Params(this);
  }
}

export class TokensLocked__Params {
  _event: TokensLocked;

  constructor(event: TokensLocked) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensWithdrawn extends ethereum.Event {
  get params(): TokensWithdrawn__Params {
    return new TokensWithdrawn__Params(this);
  }
}

export class TokensWithdrawn__Params {
  _event: TokensWithdrawn;

  constructor(event: TokensWithdrawn) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VoteAdded extends ethereum.Event {
  get params(): VoteAdded__Params {
    return new VoteAdded__Params(this);
  }
}

export class VoteAdded__Params {
  _event: VoteAdded;

  constructor(event: VoteAdded) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get option(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get votingPower(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SnapshotRepERC20Guild__getProposalResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get to(): Array<Address> {
    return this[3].toAddressArray();
  }

  get data(): Array<Bytes> {
    return this[4].toBytesArray();
  }

  get value(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get title(): string {
    return this[6].toString();
  }

  get contentHash(): string {
    return this[7].toString();
  }

  get state(): i32 {
    return this[8].toI32();
  }

  get totalVotes(): Array<BigInt> {
    return this[9].toBigIntArray();
  }
}

export class SnapshotRepERC20Guild__getProposalVotesOfVoterResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOption(): BigInt {
    return this.value0;
  }

  getVotingPower(): BigInt {
    return this.value1;
  }
}

export class SnapshotRepERC20Guild__proposalVotesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOption(): BigInt {
    return this.value0;
  }

  getVotingPower(): BigInt {
    return this.value1;
  }
}

export class SnapshotRepERC20Guild__proposalsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: string;
  value4: string;
  value5: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: string,
    value4: string,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getTitle(): string {
    return this.value3;
  }

  getContentHash(): string {
    return this.value4;
  }

  getState(): i32 {
    return this.value5;
  }
}

export class SnapshotRepERC20Guild__tokensLockedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class SnapshotRepERC20Guild extends ethereum.SmartContract {
  static bind(address: Address): SnapshotRepERC20Guild {
    return new SnapshotRepERC20Guild("SnapshotRepERC20Guild", address);
  }

  MAX_OPTIONS_PER_PROPOSAL(): i32 {
    let result = super.call(
      "MAX_OPTIONS_PER_PROPOSAL",
      "MAX_OPTIONS_PER_PROPOSAL():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_MAX_OPTIONS_PER_PROPOSAL(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MAX_OPTIONS_PER_PROPOSAL",
      "MAX_OPTIONS_PER_PROPOSAL():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  activeProposalsNow(): BigInt {
    let result = super.call(
      "activeProposalsNow",
      "activeProposalsNow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_activeProposalsNow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeProposalsNow",
      "activeProposalsNow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createProposal(
    to: Array<Address>,
    data: Array<Bytes>,
    value: Array<BigInt>,
    totalOptions: BigInt,
    title: string,
    contentHash: string
  ): Bytes {
    let result = super.call(
      "createProposal",
      "createProposal(address[],bytes[],uint256[],uint256,string,string):(bytes32)",
      [
        ethereum.Value.fromAddressArray(to),
        ethereum.Value.fromBytesArray(data),
        ethereum.Value.fromUnsignedBigIntArray(value),
        ethereum.Value.fromUnsignedBigInt(totalOptions),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(contentHash)
      ]
    );

    return result[0].toBytes();
  }

  try_createProposal(
    to: Array<Address>,
    data: Array<Bytes>,
    value: Array<BigInt>,
    totalOptions: BigInt,
    title: string,
    contentHash: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createProposal",
      "createProposal(address[],bytes[],uint256[],uint256,string,string):(bytes32)",
      [
        ethereum.Value.fromAddressArray(to),
        ethereum.Value.fromBytesArray(data),
        ethereum.Value.fromUnsignedBigIntArray(value),
        ethereum.Value.fromUnsignedBigInt(totalOptions),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(contentHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getActiveProposalsNow(): BigInt {
    let result = super.call(
      "getActiveProposalsNow",
      "getActiveProposalsNow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActiveProposalsNow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveProposalsNow",
      "getActiveProposalsNow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockTime(): BigInt {
    let result = super.call("getLockTime", "getLockTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLockTime", "getLockTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxActiveProposals(): BigInt {
    let result = super.call(
      "getMaxActiveProposals",
      "getMaxActiveProposals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxActiveProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxActiveProposals",
      "getMaxActiveProposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxGasPrice(): BigInt {
    let result = super.call("getMaxGasPrice", "getMaxGasPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxGasPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxGasPrice",
      "getMaxGasPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumMembersForProposalCreation(): BigInt {
    let result = super.call(
      "getMinimumMembersForProposalCreation",
      "getMinimumMembersForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinimumMembersForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumMembersForProposalCreation",
      "getMinimumMembersForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumTokensLockedForProposalCreation(): BigInt {
    let result = super.call(
      "getMinimumTokensLockedForProposalCreation",
      "getMinimumTokensLockedForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinimumTokensLockedForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumTokensLockedForProposalCreation",
      "getMinimumTokensLockedForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getName(): string {
    let result = super.call("getName", "getName():(string)", []);

    return result[0].toString();
  }

  try_getName(): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getPermissionRegistry(): Address {
    let result = super.call(
      "getPermissionRegistry",
      "getPermissionRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getPermissionRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPermissionRegistry",
      "getPermissionRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProposal(
    proposalId: Bytes
  ): SnapshotRepERC20Guild__getProposalResultValue0Struct {
    let result = super.call(
      "getProposal",
      "getProposal(bytes32):((address,uint256,uint256,address[],bytes[],uint256[],string,string,uint8,uint256[]))",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return changetype<SnapshotRepERC20Guild__getProposalResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProposal(
    proposalId: Bytes
  ): ethereum.CallResult<SnapshotRepERC20Guild__getProposalResultValue0Struct> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(bytes32):((address,uint256,uint256,address[],bytes[],uint256[],string,string,uint8,uint256[]))",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SnapshotRepERC20Guild__getProposalResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getProposalSnapshotId(proposalId: Bytes): BigInt {
    let result = super.call(
      "getProposalSnapshotId",
      "getProposalSnapshotId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_getProposalSnapshotId(proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalSnapshotId",
      "getProposalSnapshotId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalTime(): BigInt {
    let result = super.call(
      "getProposalTime",
      "getProposalTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalTime",
      "getProposalTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalVotesOfVoter(
    proposalId: Bytes,
    voter: Address
  ): SnapshotRepERC20Guild__getProposalVotesOfVoterResult {
    let result = super.call(
      "getProposalVotesOfVoter",
      "getProposalVotesOfVoter(bytes32,address):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );

    return new SnapshotRepERC20Guild__getProposalVotesOfVoterResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getProposalVotesOfVoter(
    proposalId: Bytes,
    voter: Address
  ): ethereum.CallResult<SnapshotRepERC20Guild__getProposalVotesOfVoterResult> {
    let result = super.tryCall(
      "getProposalVotesOfVoter",
      "getProposalVotesOfVoter(bytes32,address):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotRepERC20Guild__getProposalVotesOfVoterResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getProposalsIds(): Array<Bytes> {
    let result = super.call(
      "getProposalsIds",
      "getProposalsIds():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getProposalsIds(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProposalsIds",
      "getProposalsIds():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getProposalsIdsLength(): BigInt {
    let result = super.call(
      "getProposalsIdsLength",
      "getProposalsIdsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalsIdsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalsIdsLength",
      "getProposalsIdsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSignedVote(signedVoteHash: Bytes): boolean {
    let result = super.call("getSignedVote", "getSignedVote(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(signedVoteHash)
    ]);

    return result[0].toBoolean();
  }

  try_getSignedVote(signedVoteHash: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getSignedVote",
      "getSignedVote(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(signedVoteHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSnapshotVotingPowerForProposalExecution(proposalId: Bytes): BigInt {
    let result = super.call(
      "getSnapshotVotingPowerForProposalExecution",
      "getSnapshotVotingPowerForProposalExecution(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_getSnapshotVotingPowerForProposalExecution(
    proposalId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSnapshotVotingPowerForProposalExecution",
      "getSnapshotVotingPowerForProposalExecution(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeForExecution(): BigInt {
    let result = super.call(
      "getTimeForExecution",
      "getTimeForExecution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimeForExecution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeForExecution",
      "getTimeForExecution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getToken(): Address {
    let result = super.call("getToken", "getToken():(address)", []);

    return result[0].toAddress();
  }

  try_getToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenVault(): Address {
    let result = super.call("getTokenVault", "getTokenVault():(address)", []);

    return result[0].toAddress();
  }

  try_getTokenVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenVault",
      "getTokenVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalLocked(): BigInt {
    let result = super.call("getTotalLocked", "getTotalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalLocked",
      "getTotalLocked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalMembers(): BigInt {
    let result = super.call(
      "getTotalMembers",
      "getTotalMembers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalMembers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalMembers",
      "getTotalMembers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalProposals(): BigInt {
    let result = super.call(
      "getTotalProposals",
      "getTotalProposals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalProposals",
      "getTotalProposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVoteGas(): BigInt {
    let result = super.call("getVoteGas", "getVoteGas():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVoteGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVoteGas", "getVoteGas():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVoterLockTimestamp(voter: Address): BigInt {
    let result = super.call(
      "getVoterLockTimestamp",
      "getVoterLockTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(voter)]
    );

    return result[0].toBigInt();
  }

  try_getVoterLockTimestamp(voter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVoterLockTimestamp",
      "getVoterLockTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(voter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingPowerForProposalCreation(): BigInt {
    let result = super.call(
      "getVotingPowerForProposalCreation",
      "getVotingPowerForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVotingPowerForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPowerForProposalCreation",
      "getVotingPowerForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingPowerForProposalExecution(): BigInt {
    let result = super.call(
      "getVotingPowerForProposalExecution",
      "getVotingPowerForProposalExecution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVotingPowerForProposalExecution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPowerForProposalExecution",
      "getVotingPowerForProposalExecution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashVote(
    voter: Address,
    proposalId: Bytes,
    option: BigInt,
    votingPower: BigInt
  ): Bytes {
    let result = super.call(
      "hashVote",
      "hashVote(address,bytes32,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromUnsignedBigInt(option),
        ethereum.Value.fromUnsignedBigInt(votingPower)
      ]
    );

    return result[0].toBytes();
  }

  try_hashVote(
    voter: Address,
    proposalId: Bytes,
    option: BigInt,
    votingPower: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashVote",
      "hashVote(address,bytes32,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromUnsignedBigInt(option),
        ethereum.Value.fromUnsignedBigInt(votingPower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  lockTime(): BigInt {
    let result = super.call("lockTime", "lockTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockTime", "lockTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxActiveProposals(): BigInt {
    let result = super.call(
      "maxActiveProposals",
      "maxActiveProposals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxActiveProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxActiveProposals",
      "maxActiveProposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxGasPrice(): BigInt {
    let result = super.call("maxGasPrice", "maxGasPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxGasPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxGasPrice", "maxGasPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumMembersForProposalCreation(): BigInt {
    let result = super.call(
      "minimumMembersForProposalCreation",
      "minimumMembersForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumMembersForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumMembersForProposalCreation",
      "minimumMembersForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTokensLockedForProposalCreation(): BigInt {
    let result = super.call(
      "minimumTokensLockedForProposalCreation",
      "minimumTokensLockedForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumTokensLockedForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTokensLockedForProposalCreation",
      "minimumTokensLockedForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  proposalTime(): BigInt {
    let result = super.call("proposalTime", "proposalTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposalTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("proposalTime", "proposalTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotes(
    param0: Bytes,
    param1: Address
  ): SnapshotRepERC20Guild__proposalVotesResult {
    let result = super.call(
      "proposalVotes",
      "proposalVotes(bytes32,address):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new SnapshotRepERC20Guild__proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_proposalVotes(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<SnapshotRepERC20Guild__proposalVotesResult> {
    let result = super.tryCall(
      "proposalVotes",
      "proposalVotes(bytes32,address):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotRepERC20Guild__proposalVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  proposals(param0: Bytes): SnapshotRepERC20Guild__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(bytes32):(address,uint256,uint256,string,string,uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new SnapshotRepERC20Guild__proposalsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toString(),
      result[5].toI32()
    );
  }

  try_proposals(
    param0: Bytes
  ): ethereum.CallResult<SnapshotRepERC20Guild__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(bytes32):(address,uint256,uint256,string,string,uint8)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotRepERC20Guild__proposalsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toString(),
        value[5].toI32()
      )
    );
  }

  proposalsIds(param0: BigInt): Bytes {
    let result = super.call("proposalsIds", "proposalsIds(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_proposalsIds(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proposalsIds",
      "proposalsIds(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proposalsSnapshots(param0: Bytes): BigInt {
    let result = super.call(
      "proposalsSnapshots",
      "proposalsSnapshots(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalsSnapshots(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalsSnapshots",
      "proposalsSnapshots(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signedVotes(param0: Bytes): boolean {
    let result = super.call("signedVotes", "signedVotes(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_signedVotes(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("signedVotes", "signedVotes(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  timeForExecution(): BigInt {
    let result = super.call(
      "timeForExecution",
      "timeForExecution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeForExecution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeForExecution",
      "timeForExecution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenVault(): Address {
    let result = super.call("tokenVault", "tokenVault():(address)", []);

    return result[0].toAddress();
  }

  try_tokenVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenVault", "tokenVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensLocked(param0: Address): SnapshotRepERC20Guild__tokensLockedResult {
    let result = super.call(
      "tokensLocked",
      "tokensLocked(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SnapshotRepERC20Guild__tokensLockedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_tokensLocked(
    param0: Address
  ): ethereum.CallResult<SnapshotRepERC20Guild__tokensLockedResult> {
    let result = super.tryCall(
      "tokensLocked",
      "tokensLocked(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotRepERC20Guild__tokensLockedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalProposals(): BigInt {
    let result = super.call("totalProposals", "totalProposals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalProposals",
      "totalProposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voteGas(): BigInt {
    let result = super.call("voteGas", "voteGas():(uint256)", []);

    return result[0].toBigInt();
  }

  try_voteGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("voteGas", "voteGas():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerOf(account: Address): BigInt {
    let result = super.call(
      "votingPowerOf",
      "votingPowerOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_votingPowerOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerOf",
      "votingPowerOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerOfAt(account: Address, snapshotId: BigInt): BigInt {
    let result = super.call(
      "votingPowerOfAt",
      "votingPowerOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );

    return result[0].toBigInt();
  }

  try_votingPowerOfAt(
    account: Address,
    snapshotId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerOfAt",
      "votingPowerOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(snapshotId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerOfMultipleAt(
    accounts: Array<Address>,
    snapshotIds: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "votingPowerOfMultipleAt",
      "votingPowerOfMultipleAt(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(snapshotIds)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_votingPowerOfMultipleAt(
    accounts: Array<Address>,
    snapshotIds: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "votingPowerOfMultipleAt",
      "votingPowerOfMultipleAt(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(snapshotIds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  votingPowerPercentageForProposalCreation(): BigInt {
    let result = super.call(
      "votingPowerPercentageForProposalCreation",
      "votingPowerPercentageForProposalCreation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingPowerPercentageForProposalCreation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerPercentageForProposalCreation",
      "votingPowerPercentageForProposalCreation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPowerPercentageForProposalExecution(): BigInt {
    let result = super.call(
      "votingPowerPercentageForProposalExecution",
      "votingPowerPercentageForProposalExecution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingPowerPercentageForProposalExecution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPowerPercentageForProposalExecution",
      "votingPowerPercentageForProposalExecution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CreateProposalCall extends ethereum.Call {
  get inputs(): CreateProposalCall__Inputs {
    return new CreateProposalCall__Inputs(this);
  }

  get outputs(): CreateProposalCall__Outputs {
    return new CreateProposalCall__Outputs(this);
  }
}

export class CreateProposalCall__Inputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get to(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get totalOptions(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get title(): string {
    return this._call.inputValues[4].value.toString();
  }

  get contentHash(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateProposalCall__Outputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class EndProposalCall extends ethereum.Call {
  get inputs(): EndProposalCall__Inputs {
    return new EndProposalCall__Inputs(this);
  }

  get outputs(): EndProposalCall__Outputs {
    return new EndProposalCall__Outputs(this);
  }
}

export class EndProposalCall__Inputs {
  _call: EndProposalCall;

  constructor(call: EndProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EndProposalCall__Outputs {
  _call: EndProposalCall;

  constructor(call: EndProposalCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proposalTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _timeForExecution(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _votingPowerPercentageForProposalExecution(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _votingPowerPercentageForProposalCreation(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _voteGas(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _maxGasPrice(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _maxActiveProposals(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _lockTime(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _permissionRegistry(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockTokensCall extends ethereum.Call {
  get inputs(): LockTokensCall__Inputs {
    return new LockTokensCall__Inputs(this);
  }

  get outputs(): LockTokensCall__Outputs {
    return new LockTokensCall__Outputs(this);
  }
}

export class LockTokensCall__Inputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockTokensCall__Outputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get _proposalTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _timeForExecution(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _votingPowerPercentageForProposalExecution(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _votingPowerPercentageForProposalCreation(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _voteGas(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxGasPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxActiveProposals(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _lockTime(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minimumMembersForProposalCreation(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _minimumTokensLockedForProposalCreation(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetSignedVoteCall extends ethereum.Call {
  get inputs(): SetSignedVoteCall__Inputs {
    return new SetSignedVoteCall__Inputs(this);
  }

  get outputs(): SetSignedVoteCall__Outputs {
    return new SetSignedVoteCall__Outputs(this);
  }
}

export class SetSignedVoteCall__Inputs {
  _call: SetSignedVoteCall;

  constructor(call: SetSignedVoteCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get option(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get votingPower(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get voter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SetSignedVoteCall__Outputs {
  _call: SetSignedVoteCall;

  constructor(call: SetSignedVoteCall) {
    this._call = call;
  }
}

export class SetVoteCall extends ethereum.Call {
  get inputs(): SetVoteCall__Inputs {
    return new SetVoteCall__Inputs(this);
  }

  get outputs(): SetVoteCall__Outputs {
    return new SetVoteCall__Outputs(this);
  }
}

export class SetVoteCall__Inputs {
  _call: SetVoteCall;

  constructor(call: SetVoteCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get option(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get votingPower(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetVoteCall__Outputs {
  _call: SetVoteCall;

  constructor(call: SetVoteCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
