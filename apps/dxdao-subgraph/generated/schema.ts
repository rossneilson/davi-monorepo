// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get to(): Array<string> | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set to(value: Array<string> | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromStringArray(<Array<string>>value));
    }
  }

  get data(): Array<string> | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set data(value: Array<string> | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromStringArray(<Array<string>>value));
    }
  }

  get value(): Array<BigInt> | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set value(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get contentHash(): string {
    let value = this.get("contentHash");
    return value!.toString();
  }

  set contentHash(value: string) {
    this.set("contentHash", Value.fromString(value));
  }

  get contractState(): BigInt {
    let value = this.get("contractState");
    return value!.toBigInt();
  }

  set contractState(value: BigInt) {
    this.set("contractState", Value.fromBigInt(value));
  }

  get guildId(): string {
    let value = this.get("guildId");
    return value!.toString();
  }

  set guildId(value: string) {
    this.set("guildId", Value.fromString(value));
  }

  get totalVotes(): Array<BigInt> | null {
    let value = this.get("totalVotes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set totalVotes(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("totalVotes");
    } else {
      this.set("totalVotes", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get options(): Array<string> | null {
    let value = this.get("options");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string> | null) {
    if (!value) {
      this.unset("options");
    } else {
      this.set("options", Value.fromStringArray(<Array<string>>value));
    }
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get executionTransactionHash(): string | null {
    let value = this.get("executionTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set executionTransactionHash(value: string | null) {
    if (!value) {
      this.unset("executionTransactionHash");
    } else {
      this.set("executionTransactionHash", Value.fromString(<string>value));
    }
  }

  get statesLog(): Array<string> | null {
    let value = this.get("statesLog");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set statesLog(value: Array<string> | null) {
    if (!value) {
      this.unset("statesLog");
    } else {
      this.set("statesLog", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ProposalStateLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalStateLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalStateLog must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProposalStateLog", id.toString(), this);
    }
  }

  static load(id: string): ProposalStateLog | null {
    return changetype<ProposalStateLog | null>(
      store.get("ProposalStateLog", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): BigInt {
    let value = this.get("state");
    return value!.toBigInt();
  }

  set state(value: BigInt) {
    this.set("state", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class Option extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Option entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Option must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Option", id.toString(), this);
    }
  }

  static load(id: string): Option | null {
    return changetype<Option | null>(store.get("Option", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get label(): string | null {
    let value = this.get("label");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set label(value: string | null) {
    if (!value) {
      this.unset("label");
    } else {
      this.set("label", Value.fromString(<string>value));
    }
  }

  get proposalId(): string | null {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposalId(value: string | null) {
    if (!value) {
      this.unset("proposalId");
    } else {
      this.set("proposalId", Value.fromString(<string>value));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get voteAmount(): BigInt | null {
    let value = this.get("voteAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteAmount(value: BigInt | null) {
    if (!value) {
      this.unset("voteAmount");
    } else {
      this.set("voteAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class Action extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Action entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Action must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Action", id.toString(), this);
    }
  }

  static load(id: string): Action | null {
    return changetype<Action | null>(store.get("Action", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get optionId(): string {
    let value = this.get("optionId");
    return value!.toString();
  }

  set optionId(value: string) {
    this.set("optionId", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get data(): string {
    let value = this.get("data");
    return value!.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): string {
    let value = this.get("proposalId");
    return value!.toString();
  }

  set proposalId(value: string) {
    this.set("proposalId", Value.fromString(value));
  }

  get option(): BigInt {
    let value = this.get("option");
    return value!.toBigInt();
  }

  set option(value: BigInt) {
    this.set("option", Value.fromBigInt(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get votingPower(): BigInt {
    let value = this.get("votingPower");
    return value!.toBigInt();
  }

  set votingPower(value: BigInt) {
    this.set("votingPower", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Member must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get tokensLocked(): BigInt {
    let value = this.get("tokensLocked");
    return value!.toBigInt();
  }

  set tokensLocked(value: BigInt) {
    this.set("tokensLocked", Value.fromBigInt(value));
  }
}

export class Guild extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Guild entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Guild must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Guild", id.toString(), this);
    }
  }

  static load(id: string): Guild | null {
    return changetype<Guild | null>(store.get("Guild", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get permissionRegistry(): string | null {
    let value = this.get("permissionRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set permissionRegistry(value: string | null) {
    if (!value) {
      this.unset("permissionRegistry");
    } else {
      this.set("permissionRegistry", Value.fromString(<string>value));
    }
  }

  get proposalTime(): BigInt | null {
    let value = this.get("proposalTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalTime(value: BigInt | null) {
    if (!value) {
      this.unset("proposalTime");
    } else {
      this.set("proposalTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockTime(): BigInt | null {
    let value = this.get("lockTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockTime(value: BigInt | null) {
    if (!value) {
      this.unset("lockTime");
    } else {
      this.set("lockTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeForExecution(): BigInt | null {
    let value = this.get("timeForExecution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeForExecution(value: BigInt | null) {
    if (!value) {
      this.unset("timeForExecution");
    } else {
      this.set("timeForExecution", Value.fromBigInt(<BigInt>value));
    }
  }

  get votingPowerForProposalCreation(): BigInt | null {
    let value = this.get("votingPowerForProposalCreation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingPowerForProposalCreation(value: BigInt | null) {
    if (!value) {
      this.unset("votingPowerForProposalCreation");
    } else {
      this.set(
        "votingPowerForProposalCreation",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get votingPowerForProposalExecution(): BigInt | null {
    let value = this.get("votingPowerForProposalExecution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingPowerForProposalExecution(value: BigInt | null) {
    if (!value) {
      this.unset("votingPowerForProposalExecution");
    } else {
      this.set(
        "votingPowerForProposalExecution",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get voteGas(): BigInt | null {
    let value = this.get("voteGas");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteGas(value: BigInt | null) {
    if (!value) {
      this.unset("voteGas");
    } else {
      this.set("voteGas", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxGasPrice(): BigInt | null {
    let value = this.get("maxGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxGasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("maxGasPrice");
    } else {
      this.set("maxGasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxActiveProposals(): BigInt | null {
    let value = this.get("maxActiveProposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxActiveProposals(value: BigInt | null) {
    if (!value) {
      this.unset("maxActiveProposals");
    } else {
      this.set("maxActiveProposals", Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumMembersForProposalCreation(): BigInt | null {
    let value = this.get("minimumMembersForProposalCreation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumMembersForProposalCreation(value: BigInt | null) {
    if (!value) {
      this.unset("minimumMembersForProposalCreation");
    } else {
      this.set(
        "minimumMembersForProposalCreation",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get minimumTokensLockedForProposalCreation(): BigInt | null {
    let value = this.get("minimumTokensLockedForProposalCreation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumTokensLockedForProposalCreation(value: BigInt | null) {
    if (!value) {
      this.unset("minimumTokensLockedForProposalCreation");
    } else {
      this.set(
        "minimumTokensLockedForProposalCreation",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get permissions(): Array<string> {
    let value = this.get("permissions");
    return value!.toStringArray();
  }

  set permissions(value: Array<string>) {
    this.set("permissions", Value.fromStringArray(value));
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get members(): Array<string> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set members(value: Array<string> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromStringArray(<Array<string>>value));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get bytecodeHash(): string | null {
    let value = this.get("bytecodeHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bytecodeHash(value: string | null) {
    if (!value) {
      this.unset("bytecodeHash");
    } else {
      this.set("bytecodeHash", Value.fromString(<string>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get guildAddress(): string {
    let value = this.get("guildAddress");
    return value!.toString();
  }

  set guildAddress(value: string) {
    this.set("guildAddress", Value.fromString(value));
  }
}

export class GuildPermission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GuildPermission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GuildPermission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GuildPermission", id.toString(), this);
    }
  }

  static load(id: string): GuildPermission | null {
    return changetype<GuildPermission | null>(store.get("GuildPermission", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get functionSignature(): Bytes {
    let value = this.get("functionSignature");
    return value!.toBytes();
  }

  set functionSignature(value: Bytes) {
    this.set("functionSignature", Value.fromBytes(value));
  }

  get valueAllowed(): BigInt {
    let value = this.get("valueAllowed");
    return value!.toBigInt();
  }

  set valueAllowed(value: BigInt) {
    this.set("valueAllowed", Value.fromBigInt(value));
  }

  get fromTime(): BigInt {
    let value = this.get("fromTime");
    return value!.toBigInt();
  }

  set fromTime(value: BigInt) {
    this.set("fromTime", Value.fromBigInt(value));
  }

  get allowed(): boolean {
    let value = this.get("allowed");
    return value!.toBoolean();
  }

  set allowed(value: boolean) {
    this.set("allowed", Value.fromBoolean(value));
  }

  get guild(): string | null {
    let value = this.get("guild");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set guild(value: string | null) {
    if (!value) {
      this.unset("guild");
    } else {
      this.set("guild", Value.fromString(<string>value));
    }
  }
}
